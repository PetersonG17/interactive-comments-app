version: "3.8"

networks:
    network:
  
volumes:
    postgres:
    node_modules:
    cache:

services:

    react:
      stdin_open: true
      container_name: react
      command: "sh entrypoint.sh"
      build:
          context: .
          dockerfile: ./frontend/.docker/node/Dockerfile
      ports:
          - "8000:8000"
      volumes:
          # Store the node modules folder in a volume for performance
          - node_modules:/app/node_modules
          - "./frontend/:/app"
      networks:
          - network

    nginx:
      image: nginx:stable-alpine
      container_name: nginx
      ports:
          - "8080:80"
      volumes:
          - ./backend/public:/var/www/app/public
          - ./backend/.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      depends_on:
          - php
          - postgres
      networks:
          - network

    postgres:
      image: postgres:14.3-alpine
      container_name: postgres
      tty: true
      ports:
          - 5432:5432
      environment:
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: interactive_comments
      volumes:
          - postgres:/var/lib/postgresql/data
      networks:
          - network
      cap_add:
          - SYS_NICE  # CAP_SYS_NICE

    php:
      build:
          context: .
          dockerfile: ./backend/.docker/php/Dockerfile
      image: php
      container_name: php
      tty: true
      environment:
          FLYWAY_USER: ${DATABASE_USER}
          FLYWAY_PASSWORD: ${DATABASE_PASSWORD}
          FLYWAY_URL: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}
          FLYWAY_LOCATIONS: filesystem:/flyway/sql
      env_file:
          - .env
      working_dir: /var/www/app
      depends_on:
          - postgres
      volumes:
          - ./backend:/var/www/app
          - ./database/migrations/sql:/flyway/sql
      expose:
          - 9000
      networks:
          - network

    redis:
      platform: linux/amd64
      container_name: redis
      image: redis:7.0
      command: redis-server --requirepass ${REDIS_PASSWORD}
      ports:
        - 6379:6379
      volumes:
        - cache:/data
      depends_on:
        php:
          condition: service_started
      networks:
        - network